import schedule
import os.path
import yaml
import time
import subprocess
from time import gmtime,strftime

def get_timestamp():
    return strftime("%d/%m/%y %H:%M:%S", gmtime())

if os.path.exists('config.yaml'):
    configfile = 'config.yaml'
    print("found custom config")
else:
    configfile = 'defaultconfig.yaml'
    print("no custom config found, load default")

with open(configfile, 'r') as f:
    try:
        config = yaml.safe_load(f)
        print("[{time}] - config loaded".format(time=get_timestamp()))
    except yaml.YAMLError as exc:
        print(exc)

sync_down = "rclone sync {rname}:{rpath}/finance.ledger data/".format(rname=config['remotename'], rpath=config['remotepath'])
sync_up = "rclone sync data/finance.ledger {rname}:{rpath}".format(rname=config['remotename'], rpath=config['remotepath'])

def check_for_trans():
    today = time.strftime("%d") 
    print("[{time}] - checking config".format(time=get_timestamp()))
    with open(configfile, 'r') as f:
        try:
            config = yaml.safe_load(f)
            print("[{time}] - config reloaded".format(time=get_timestamp()))
        except yaml.YAMLError as exc:
            print(exc)
    for t in config['transactions']:
        if str(t['dom']) == str(today):
            print("[{time}] - Found transaction: {rec}".format(time=get_timestamp(),rec=t['rec']))
            write_transaction(t)

def write_transaction(t):
    r = subprocess.call(sync_down, shell=True)
    
    ledgerfile = open('data/finance.ledger', 'a')
    ledgerfile.write("{date} * {rec}\n".format(date=time.strftime("%Y/%m/%d"), rec=t['rec']))
    ledgerfile.write("    ; generated by scheduledledger\n")
    ledgerfile.write("    {fromacc}\n".format(fromacc=t['from']))
    ledgerfile.write("    {toacc}    {amount} {cur}\n\n".format(toacc=t['to'], amount=t['amount'], cur=config['currency']))
    ledgerfile.close()

    r = subprocess.call(sync_up, shell=True)
    print("wrote transaction to ledgerfile")

schedule.every().day.at("01:23").do(check_for_trans)

while True:
    schedule.run_pending()
    time.sleep(1)
    

